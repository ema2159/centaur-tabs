#+TITLE: Centaur tabs
#+CREATOR: Emmanuel Bustos T.
#+OPTIONS: toc:nil 

  [[https://melpa.org/#/centaur-tabs][file:https://melpa.org/packages/centaur-tabs-badge.svg]] 
  [[http://www.gnu.org/licenses/gpl-3.0][file:https://img.shields.io/badge/License-GPL%20v3-blue.svg]] 

  [[./images/centaur.png]]
* Contents                                                              :TOC:
- [[#what-is-this][What is this?]]
- [[#installation][Installation]]
- [[#customization][Customization]]
  - [[#headline-face][Headline face]]
  - [[#tab-styles][Tab Styles]]
  - [[#tab-height][Tab height]]
  - [[#tab-icons][Tab icons]]
  - [[#selected-tab-bar][Selected tab bar]]
  - [[#customize-the-close-button][Customize the close button]]
  - [[#customize-the-modified-marker][Customize the modified marker]]
  - [[#inherit-tabbar-faces][Inherit tabbar faces:]]
  - [[#disable-centaur-tabs-in-selected-buffers][Disable centaur-tabs in selected buffers]]
  - [[#buffer-groups][Buffer groups]]
  - [[#show-buffer-groups-names-instead-of-buffer-names-in-tabs][Show buffer groups names instead of buffer names in tabs]]
  - [[#enable-vim-like-tab-motions][Enable Vim like tab motions]]
  - [[#prevent-the-access-to-specified-buffers][Prevent the access to specified buffers]]
  - [[#tab-cycling][Tab cycling]]
  - [[#helm-integration][Helm integration]]
  - [[#ivy-integration][Ivy integration]]
  - [[#projectile-integration][Projectile integration]]
- [[#to-do-1417][TO DO]]
- [[#my-personal-configuration][My personal configuration]]
- [[#known-supported-theme-plugins][Known supported theme plugins]]
  - [[#currently-themed][Currently Themed]]
  - [[#sent-pull-request][Sent Pull Request]]
- [[#how-to-contribute][How to contribute]]

* What is this?
  This projects aims to become an aesthetic, functional and efficient tabs plugin for Emacs with a lot of customization options. 
  Although this is a fork from [[https://github.com/manateelazycat/awesome-tab][awesome-tab]] (that I forked with the permission from the author and it's also based on [[https://github.com/dholm/tabbar][tabbar]]) it's been heavily modified so now it may be considered a different package.
  Also this package integrates functionalities from [[https://github.com/mattfidler/tabbar-ruler.el][tabbar-ruler]].

  It currently looks like this (although there's a ton of possible configurations):

  [[./screenshot.png]]
* Installation
  You can download this package from MELPA. This is a basic ~use-package~ configuration: 
  #+BEGIN_SRC emacs-lisp :tangle yes
    (use-package centaur-tabs
      :demand
      :config
      (centaur-tabs-mode t)
      :bind
      ("C-<prior>" . centaur-tabs-backward)
      ("C-<next>" . centaur-tabs-forward))
  #+END_SRC

  Or if you use require:
  #+BEGIN_SRC emacs-lisp :tangle yes
    (require 'centaur-tabs)
    (centaur-tabs-mode t)
    (global-set-key (kbd "C-<prior>")  'centaur-tabs-backward)
    (global-set-key (kbd "C-<next>") 'centaur-tabs-forward)
  #+END_SRC

* Customization
  This package is heavily customizable, with many options available to the user. Here are some of them:
** Headline face
   You can make the headline face match the centaur-tabs-default face. This makes the tabbar have an uniform appearance. In your configuration use the following function: 
   #+BEGIN_SRC emacs-lisp :tangle yes
     (centaur-tabs-headline-match)
   #+END_SRC
** Tab Styles
   To change the tab style, modify the centaur-tabs-style variable like this:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq centaur-tabs-style "bar")
   #+END_SRC

   The options available are:
   - "alternate"

  [[./images/alternate.png]]

   - "bar"

  [[./images/bar.png]]

   - "box"

  [[./images/box.png]]

   - "chamfer"

  [[./images/chamfer.png]]

   - "rounded"

  [[./images/rounded.png]]

   - "slant"

  [[./images/slant.png]]

   - "wave"

  [[./images/wave.png]]

   - "zigzag"

  [[./images/zigzag.png]]
  
** Tab height
   To change the tab height do
   #+BEGIN_SRC emacs-lisp :tangle yes
    (setq centaur-tabs-height 32)
   #+END_SRC
** Tab icons
   To display themed icons from all the icons
   #+BEGIN_SRC emacs-lisp :tangle yes
    (setq centaur-tabs-set-icons t)
   #+END_SRC
** Selected tab bar
   To display a colored bar at the left of the selected tab
   #+BEGIN_SRC emacs-lisp :tangle yes
    (setq centaur-tabs-set-bar 'left)
   #+END_SRC
   [[./images/bar.png]]
   
   To display an overline over the selected tab:
   #+BEGIN_SRC emacs-lisp :tangle yes
    (setq centaur-tabs-set-bar 'over)
   #+END_SRC
   [[./images/overline.png]]

   The color can be customized via the centaur-active-bar-face face.
** Customize the close button
   To disable the close button
   #+BEGIN_SRC emacs-lisp :tangle yes
    (setq centaur-tabs-set-close-button nil)
   #+END_SRC
   To change the displayed string for the close button
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq centaur-tabs-close-button "X")
   #+END_SRC
   Also there are two faces to customize the close button string: centaur-tabs-close-unselected and centaur-tabs-close-selected
** Customize the modified marker
   To display a marker indicating that a buffer has been modified (atom-style)
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq centaur-tabs-set-modified-marker t)
   #+END_SRC
   To change the displayed string for the modified-marker
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq centaur-tabs-modified-marker "*")
   #+END_SRC
   Also there are two faces to customize the close button string: centaur-tabs-modified-marker-unselected and centaur-tabs-modified-marker-selected

  [[./images/marker.png]]
** Inherit tabbar faces:
   Many theme plugins have already themed other tab plugins (~doom-themes~ for example). This package is able to use those tab plugin faces to theme itself. In a near future, many PRs will be sent so this package gets properly themed.
   To use the already existing tabbar faces use:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (centaur-tabs-inherit-tabbar-faces)
   #+END_SRC
** Disable centaur-tabs in selected buffers
   To disable the tabs in a buffer just add a hook to the ~centaur-tabs-local-mode~ function like this:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (add-hook 'dired-mode-hook 'centaur-tabs-local-mode)
   #+END_SRC
   
   or with ~use-package~:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package centaur-tabs
       ...
       :hook
       (dired-mode . centaur-tabs-local-mode)
       ...)
   #+END_SRC

** Buffer groups
   To customize the way that the buffers are grouped modify the ~centaur-tabs-buffer-groups~ function like this: 
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun centaur-tabs-buffer-groups ()
       "`centaur-tabs-buffer-groups' control buffers' group rules.

     Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
     All buffer name start with * will group to \"Emacs\".
     Other buffer group by `centaur-tabs-get-group-name' with project name."
       (list
	(cond
	 ((or (string-equal "*" (substring (buffer-name) 0 1))
	      (memq major-mode '(magit-process-mode
				 magit-status-mode
				 magit-diff-mode
				 magit-log-mode
				 magit-file-mode
				 magit-blob-mode
				 magit-blame-mode
				 )))
	  "Emacs")
	 ((derived-mode-p 'prog-mode)
	  "Editing")
	 ((derived-mode-p 'dired-mode)
	  "Dired")
	 ((memq major-mode '(helpful-mode
			     help-mode))
	  "Help")
	 ((memq major-mode '(org-mode
			     org-agenda-clockreport-mode
			     org-src-mode
			     org-agenda-mode
			     org-beamer-mode
			     org-indent-mode
			     org-bullets-mode
			     org-cdlatex-mode
			     org-agenda-log-mode
			     diary-mode))
	  "OrgMode")
	 (t
	  (centaur-tabs-get-group-name (current-buffer))))))
   #+END_SRC
   
** Show buffer groups names instead of buffer names in tabs 
   If you want your tabs to display buffer groups names instead of buffer names you can put the following in your configuration:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq centaur-tabs--buffer-show-groups t)
   #+END_SRC
   You can toggle between the two options interactively with the ~(centaur-tabs-toggle-groups)~ command. 
** Enable Vim like tab motions
   To enable Vim like tab changing binds
   #+BEGIN_SRC emacs-lisp :tangle yes
     (define-key evil-normal-state-map (kbd "g t") 'centaur-tabs-forward)
     (define-key evil-normal-state-map (kbd "g T") 'centaur-tabs-backward)
   #+END_SRC
   
   or with ~use-package~:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (use-package centaur-tabs
       ...
       :bind
       (:map evil-normal-state-map
	     ("g t" . centaur-tabs-forward)
	     ("g T" . centaur-tabs-backward))
       ...)
   #+END_SRC
** Prevent the access to specified buffers 
   You can prevent the access to some buffers via tab motions changing the following function like this:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (defun centaur-tabs-hide-tab (x)
       (let ((name (format "%s" x)))
	 (or
	  (string-prefix-p "*epc" name)
	  (string-prefix-p "*helm" name)
	  (string-prefix-p "*Compile-Log*" name)
	  (string-prefix-p "*lsp" name)
	  (and (string-prefix-p "magit" name)
	       (not (file-name-extension name)))
	  )))
   #+END_SRC
** Tab cycling
   The default behaviour from the ~centaur-tabs-forward/backward~ functions is to go through all the tabs in the current group and then change the group. If this is something that is to desired to be changed the ~centaur-tabs-cycle-scope~ custom must be changed like this:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (setq centaur-tabs-cycle-scope 'tabs)
   #+END_SRC
   
   There are three options:
   - 'default: (Already described)
   - 'tabs: Cycle through visible tabs (that is, the tabs in the current group)
   - 'groups: Navigate through tab groups only
** Helm integration
   You can integrate Helm with centaur-tabs for changing tab-groups. Just add helm-source-centaur-tabs-group in helm-source-list. Then you'll be able to use ~(centaur-tabs-build-helm-source)~ function and bind it to any key you want. (I'm not a Helm user so I'll not be able to solve problems related to this).
** Ivy integration
   You can integrate Ivy with centaur-tabs for changing tab-groups. Just use the ~(centaur-tabs-counsel-switch-group)~ and bind it to any key you want.
** Projectile integration
   You can group your tabs by Projectile's project. Just use the following function in your configuration:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (centaur-tabs-group-by-projectile-project)
   #+END_SRC
   
   This function can be called interactively to enable Projectile grouping. To go back to centaur-tabs's user defined (or default) buffer grouping function you can interactively call:
   #+BEGIN_SRC emacs-lisp :tangle yes
     (centaur-tabs-group-buffer-groups)
   #+END_SRC
* TO DO [15/19]
  - [X] Integrate all-the-icons
  - [X] Improve all the icons placing
  - [X] Fix all the icons background
  - [X] Add selected, unselected, selected-modified and unselected-modified faces
  - [X] Make function to inherit tabbar faces 
  - [X] Group tabs by projectile's project (was already implemented but not for projectile)
  - [X] Create PR to different theme packages for this package 
  - [X] Add modified marker icon option
  - [X] Add sideline for selected tab (atom style)
  - [X] Add overline for selected tab (atom style). It's easy to add to the text, but not to the icon, so for any who figures it out a PR is welcome. 
  - [ ] Add easy tab style configuration function. (Atom, Sublime, VS Code... like ~(centaur-tabs-tab-theme "atom")~)
  - [X] Make icon insert after the separator
  - [X] Add a customizable close button
  - [ ] Explore if ~after-modifying-buffer~ function can be improved
  - [X] Fix messages buffer icon an FontAwesome errors
  - [ ] Check for Elscreen compatibility
  - [X] Add this package to MELPA
  - [X] Make a configuration to display buffer groups names instead of buffer names in tabs 
  - [ ] Add full evil-mode support with tab commands 
    
* My personal configuration 
  My personal configuration for reference:
  
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package centaur-tabs
    :load-path "~/.emacs.d/other/centaur-tabs"
    :config
    (setq centaur-tabs-style "bar")
    (setq centaur-tabs-height 32)
    (setq centaur-tabs-set-icons t)
    (setq centaur-tabs-set-bar 'over)
    (setq centaur-tabs-set-modified-marker t)
    (centaur-tabs-headline-match)
    (centaur-tabs-mode t)
    (defun centaur-tabs-buffer-groups ()
      "`centaur-tabs-buffer-groups' control buffers' group rules.

  Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
  All buffer name start with * will group to \"Emacs\".
  Other buffer group by `centaur-tabs-get-group-name' with project name."
      (list
       (cond
	((or (string-equal "*" (substring (buffer-name) 0 1))
	     (memq major-mode '(magit-process-mode
				magit-status-mode
				magit-diff-mode
				magit-log-mode
				magit-file-mode
				magit-blob-mode
				magit-blame-mode
				)))
	 "Emacs")
	((derived-mode-p 'prog-mode)
	 "Editing")
	((derived-mode-p 'dired-mode)
	 "Dired")
	((memq major-mode '(helpful-mode
			    help-mode))
	 "Help")
	((memq major-mode '(org-mode
			    org-agenda-clockreport-mode
			    org-src-mode
			    org-agenda-mode
			    org-beamer-mode
			    org-indent-mode
			    org-bullets-mode
			    org-cdlatex-mode
			    org-agenda-log-mode
			    diary-mode))
	 "OrgMode")
	(t
	 (centaur-tabs-get-group-name (current-buffer))))))
    :hook
    (dashboard-mode . centaur-tabs-local-mode)
    (term-mode . centaur-tabs-local-mode)
    (calendar-mode . centaur-tabs-local-mode)
    (org-agenda-mode . centaur-tabs-local-mode)
    (helpful-mode . centaur-tabs-local-mode)
    :bind
    ("C-<prior>" . centaur-tabs-backward)
    ("C-<next>" . centaur-tabs-forward)
    ("C-c t" . centaur-tabs-counsel-switch-group)
    (:map evil-normal-state-map
	  ("g t" . centaur-tabs-forward)
	  ("g T" . centaur-tabs-backward)))
#+END_SRC

* Known supported theme plugins
** Currently Themed
   - [[https://github.com/jonathanchu/atom-one-dark-theme][Atom One Dark Theme]]
   - [[https://github.com/belak/base16-emacs][Base16]]
   - [[https://github.com/hlissner/emacs-doom-themes][Doom Themes]]
   - [[https://github.com/ogdenwebb/emacs-kaolin-themes][Kaolin Themes]]
   - [[https://github.com/ianpan870102/wilmersdorf-emacs-theme][Wilmsersdorf Theme]]
** Sent Pull Request
   - [[https://github.com/nashamri/spacemacs-theme][Spacemacs Theme]]
   - [[https://github.com/bbatsov/zenburn-emacs][Zenburn]]
* How to contribute
  You can contribute by forking the repo and then creating a pull request with the changes you consider will improve the package. There's a TO DO list with wanted features so you can start from there. I'll be glad to receive help.
  Please try to keep the code as clear and documented as possible.
  
  
